const axios = require('axios');
const path = require('path');
const fs = require('fs');
const limit = 6

function streamURL(url, type) {
  return axios.get(url, {
    responseType: 'arraybuffer'
  }).then(res => {
    const filePath = path.join(__dirname, `/cache/${Date.now()}.${type}`);
    fs.writeFileSync(filePath, res.data);
    setTimeout(() => fs.unlinkSync(filePath), 1000 * 60);
    return fs.createReadStream(filePath);
  });
}

module.exports = {
  config: {
    name: "tiksearch",
    aliases: ["tsearch"],
    version: "1.0.0",
    role: 0,
    author: "H√† M·∫°nh H√πng",
    info: "T√¨m ki·∫øm video TikTok theo t·ª´ kh√≥a v√† ch·ªçn video theo s·ªë th·ª© t·ª±",
    Category: "Ti·ªán √≠ch",
    guides: "S·ª≠ d·ª•ng: /tiksearch <t·ª´ kh√≥a>",
    cd: 5,
    images: [],
  },

  onCall: async ({ event, api, args }) => {
    try {
      if (!args[0]) {
        return api.sendMessage("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm video TikTok!", event.threadID, event.messageID);
      }

      const data = await global.api.tiktoksearch(args.join(" "));

      if (!data || !data.length) {
        return api.sendMessage("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho t·ª´ kh√≥a.", event.threadID, event.messageID);
      }

      let message = `K·∫øt qu·∫£ t√¨m ki·∫øm cho t·ª´ kh√≥a "${args.join(" ")}":\n\n`;
      data.slice(0, limit).forEach((video, index) => {
        message += `${index + 1}. Ti√™u ƒë·ªÅ: ${video.desc}\n`;
        message += `L∆∞·ª£t xem: ${video.stats.playCount}\n`;
        message += `Ng∆∞·ªùi ƒëƒÉng: ${video.author.nickname} (@${video.author.uniqueId})\n\n`;
      });
      message += "Vui l√≤ng tr·∫£ l·ªùi b·∫±ng s·ªë th·ª© t·ª± c·ªßa video b·∫°n mu·ªën ch·ªçn.";

      api.sendMessage(message, event.threadID, (err, info) => {
        if (err) return console.error(err);

        global.delta.onReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          videos: data.slice(0, limit),
          originalMessageID: event.messageID
        });
      }, event.messageID);

    } catch (error) {
      console.error(error);
      api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm video TikTok.", event.threadID, event.messageID);
    }
  },

  onReply: async ({ event, api, onReply }) => {
    try {
      const choice = parseInt(event.body);
      const selectedVideo = onReply.videos[choice - 1];

      if (!selectedVideo) {
        return api.sendMessage("S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá, vui l√≤ng ch·ªçn l·∫°i!", event.threadID, event.messageID);
      }
      if (event.senderID !== onReply.author) {
      api.sendMessage("M√†y l√† th·∫±ng n√†o???", event.threadID, event.messageID); 
      return api.setMessageReaction("üòï", event.messageID, () => {}, true);
  }

      const json = await infoPostTT(`https://www.tiktok.com/video/${selectedVideo.id}`);
      api.unsendMessage(onReply.messageID);
      return api.sendMessage({
        body: `‚Ä¢üë§ ùêìùêûÃÇùêß ùêäùêûÃÇùêßùê°: ${json.author.nickname}\n` +
              `‚Ä¢üòΩ ùêàùêÉ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêùùêÆÃÄùêßùê†: ${json.author.unique_id}\n` +
              `‚Ä¢üåê ùêêùêÆùê®ÃÇÃÅùêú ùê†ùê¢ùêö: ${json.region}\n` +
              `‚Ä¢üí¨ ùêìùê¢ùêûÃÇùêÆ ƒêùêûÃÇÃÄ: ${json.title}\n` +
              `‚Ä¢‚ù§Ô∏è ùóüùòÇÃõùóºÃõÃ£ùòÅ ùòÅùó∂ùó∫: ${json.digg_count}\n` +
              `‚Ä¢üëÅ‚Äçüó® ùêãùêÆÃõùê®ÃõÃ£ùê≠ ùê±ùêûùê¶: ${json.play_count}\n` +
              `‚Ä¢üí≠ ùêãùêÆÃõùê®ÃõÃ£ùê≠ ùóØùó∂ÃÄùóªùóµ ùóπùòÇùóÆÃ£ÃÇùóª: ${json.comment_count}\n` +
              `‚Ä¢üîó ùóüùòÇÃõùóºÃõÃ£ùòÅ ùó∞ùóµùó∂ùóÆ ùòÄùó≤Ãâ: ${json.share_count}\n` +
              `‚Ä¢‚è∞ Th·ªùi gian: ${json.duration}s\n` +
              `‚Ä¢üì• ùóüùòÇÃõùóºÃõÃ£ùòÅ ùòÅùóÆÃâùó∂: ${json.download_count}\n` +
              `‚Ä¢ùóßùóµ·∫£ "‚ù§"ùóªùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùòÅùóÆÃâùó∂ ùóªùóµùóÆÃ£ùó∞`,
        attachment: await streamURL(json.play, 'mp4')
      }, event.threadID, (error, info) => {
        global.delta.onReaction.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          data: json
        });
      }, event.messageID);
    } catch (error) {
      console.error(error);
      api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n.", event.threadID, event.messageID);
    }
  },

  onReaction: async function (o) {
    const { threadID: t, messageID: m, reaction: r } = o.event;
    const h = global.delta.onReaction.find(e => e.messageID == m);

    if (!h || r !== "‚ù§") return;
    if (o.event.userID !== h.author) return

    o.api.sendMessage({
      body: `
====„Äé MUSIC TIKTOK „Äè====
‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±
üë§ ùêàùêÉ: ${h.data.music_info.id}
üí¨ ùêìùê¢ùêûÃÇùêÆ ƒêùêûÃÇÃÄ: ${h.data.music_info.title}
üîó ùêãùê¢ùêßùê§: ${h.data.music_info.play}
‚è±Ô∏è ùêìùê°ùê®ÃõÃÄùê¢ ùê†ùê¢ùêöùêß: ${h.data.music_info.duration}
‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±`,
      attachment: await streamURL(h.data.music, "mp3")
    }, t, m);
  }
};

async function infoPostTT(url) {
  return axios({
    method: 'post',
    url: `https://tikwm.com/api/`,
    data: {
      url
    },
    headers: {
      'content-type': 'application/json'
    }
  }).then(res => res.data.data);
}
